#use-added-syntax(esir)
defpackage ocdb/analog-devices/ADM7150:
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import tests/default-harness
  import ocdb/pinspec
  import ocdb/land-patterns
  import ocdb/generator-utils
  import ocdb/generic-components
  import ocdb/bundles
;[strip]
  import ocdb/symbols
  import ocdb/box-symbol
;[/strip]

public pcb-component component (v-out:Double) :
  name = "ADM7150"
  manufacturer = "Analog Devices"
  description = "800 mA Ultralow Noise, High PSRR, RF Linear Regulator"
  val a-code = switch(v-out) :
    3.0 : "3.0"
    3.3 : "3.3"
    5.0 : "5.0"
    else : fatal("Invalid output voltage for ADM7150 %_" % [v-out])
  mpn = to-string("ADM7150ARDZ-%_-R7" % [a-code])
  val ps = PinSpec $ #TABLE :
    [Ref | Int ...   | Dir  ]
    [vin  | 8 | Left]
    [en   | 7 | Left]
    [vreg | 1 | Left]
    [byp  | 3 | Left]
    [vout      | 2 | Right] 
    [ref       | 6 | Right] 
    [ref-sense | 5 | Right]
    [gnd | 4 9 | Down]
  gen-symbol-map(ps, soic127p-package(8, [2.3 3.0]))

public pcb-module module (v-out) :
  port dst : power
  port src : power
  pin vin
  pin vout
  pin gnd
  pin en
  net (dst.gnd gnd)
  net (dst.vdd vout)
  net (src.gnd gnd)
  net (src.vdd vout)
  inst ps : {analog-devices/ADM7150/component(v-out)}
  cap-strap(ps.vin,  gnd, 10.0e-6)
  cap-strap(ps.vout, gnd, 10.0e-6)
  cap-strap(ps.vreg, gnd, 10.0e-6)
  cap-strap(ps.byp,  gnd, 1.0e-6)
  cap-strap(ps.byp,  gnd, 100.0e-6)
  cap-strap(ps.ref,  gnd, 1.0e-6)
  net (ps.ref, ps.ref-sense)
  net (ps.en, en)
  net (ps.vin, vin)
  net (ps.vout, vout)
  net (ps.gnd gnd)
