#use-added-syntax(esir)
defpackage idt/5PB11xx:
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import tests/default-harness
  import pinspec
  import land-patterns
  import generator-utils
  import generic-components
  import bundles

public pcb-component component (n:Int) :
  description = "1.8V to 3.3V LVCMOS High Performance Clock Buffer Family"
  manufacturer = "IDT"
  val [code clkin-p en-p out-p vdd-p gnd-p pkg] = switch(n) :
    2  : ["02PGG" 1 2 [3, 8                               ] [6           ] [4           ] sop65-package(8) ] 
    4  : ["04PGG" 1 2 [3, 8, 5, 7                         ] [6           ] [4           ] sop65-package(8) ] 
    6  : ["06PGG" 1 2 [3, 14, 11, 13, 6, 9                ] [5, 8, 12    ] [4, 7, 10    ] sop65-package(14)] 
    8  : ["08PGG" 1 2 [3, 16, 13, 15, 6, 11, 8, 9         ] [5, 10, 14   ] [4, 7, 12    ] sop65-package(16)] 
    10 : ["10PGG" 1 2 [3, 20, 17, 19, 6, 15, 8, 13, 12, 10] [5, 9, 14, 18] [4, 7, 11, 16] sop65-package(20)]
    else : fatal("Incorrect number of channels for idt-5PB11x %_" % [n])
  mpn = to-string("5PB11%_" % [code])

  val ps = PinSpec $ #TABLE :
    [Ref    | Int ...   | Dir]
    [clkin  | clkin-p | Left]
    [en  | en-p    | Left]
    [vdd | vdd-p | Up]
    [gnd | gnd-p | Down]
    for (p in out-p, i in 0 to false) do :
      [clkout[i] | p | Right]
  gen-symbol-map(ps, pkg)

  ; TODO: inherit vdd parameter from vdd pin. Want to set externally
  val vdd-v = 1.8
  properties(vdd):
    apply-power-pin-params([1.71, 3.465], vdd-v)
  properties(clkin):
    vol => 0.3
    apply-se-receiver-params([0.3 * vdd-v, 0.7 * vdd-v])

public pcb-module module (n:Int) :
  port src : power
  pin clkin
  port clkout : pin[n]
  inst buffer : {idt-5PB11xx-cmp(n)}
  default-bypass(buffer)
  net (buffer.clkin, clkin)
  ; net (buffer.clkout, clkout)

; public defn vol (instance:Ref) :
;   inside pcb-module :
;     if has-property?(instance.clkin.vol) :
;       property(instance.clkin.vol) * property(instance.vdd)
