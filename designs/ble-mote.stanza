#use-added-syntax(esir)
defpackage design-generator :
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import esir/repl-lib
  import jitpcb/visualizer
  import ocdb/tests/default-harness
  import ocdb/generator-utils
  import ocdb/bundles
  import ocdb/design-vars
  import ocdb/generic-components
  import ocdb/power-regulators

OPERATING-TEMPERATURE = [-20.0 50.0]
OPTIMIZE-FOR = ["area"]
  
pcb-module sensor-mote :
  ; Set up power solver
  inst j : {pin-header(2)}
  set-power-source(j.p[1], j.p[2], 3.7)
  net gnd (j.p[2])

  ; Instantiate NRF52 Module
  inst proc : {ocdb/nordic/nRF52832/module}

  ; Connect thermocouple
  inst thermocouple : {ocdb/microchip/MCP9600/module}
  inst K : {pin-header(2)}
  net (K.p[1], thermocouple.in.N)
  net (K.p[2], thermocouple.in.P)
  require data:i2c from proc
  net THERMO (data, thermocouple.i2c)
  require alert:gpio[4] from proc
  for i in 0 to 4 do :
    net ALERT[i] (alert[i].gpio, thermocouple.alert[i])

  package(proc) at loc(0.0, 0.0) on Top
  package(j) at loc(-14.0, 0.0) on Top

  layout-group(proc) = proc
  layout-group(thermocouple) = thermocouple
  schematic-group(proc) = proc
  schematic-group(thermocouple) = thermocouple
  symbol(gnd) = {ocdb/symbols/ground-sym}

val main-design = default-board(sensor-mote, 4, 32.0,12.0)

lower-esir()
run-user-pass(generate-power)

view(main-design)

export-cad("BLE-mote", "kicad")