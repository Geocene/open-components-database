#use-added-syntax(esir)
defpackage design-generator :
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import esir/repl-lib
  import jitpcb/visualizer
  import ocdb/tests/default-harness
  import ocdb/generator-utils
  import ocdb/bundles
  import ocdb/design-vars
  import ocdb/generic-components
  import ocdb/power-regulators
  import ocdb/db-parts
  import ocdb/connects

OPERATING-TEMPERATURE = [-20.0 50.0]
OPTIMIZE-FOR = ["area"]
MIN-PKG = "0402"


pcb-module pms7003 :
  port vin : power
  port vin-mcu : power
  pin gnd
  pin reset
  pin set
  port uart : uart
  ; Add and connect PMS7003 particle counter interface via header pins
  inst header : {ocdb/amphenol/minitek127/component(10)}
  package(header) at loc(0.0,0.0) on Top
  net (gnd vin.gnd vin-mcu.gnd header.p[3] header.p[4])
  net (vin.vdd header.p[1] header.p[2])
  net (uart.tx, header.p[10])
  net (uart.rx, header.p[8])
  net (reset, header.p[6])
  net (set, header.p[9])
  res-strap(vin-mcu.vdd, set, 10.0e3)
  res-strap(vin-mcu.vdd, reset, 10.0e3)

pcb-module sensor-mote :
  ; Add USB connector
  inst usb : micro-usb-connector
  package(usb.con) at loc(-2.0, -7.3) on Top

  ; Define ground net and assign symbol
  net gnd (usb.usb-2.vbus.gnd)
  symbol(gnd) = {ocdb/symbols/ground-sym}

  ; Create a protected power and data interface for USB-2
  val protected-usb = (ocdb/protection/esd-clamp(usb.usb-2, gnd) as Ref)
  
  ; Manually define a power regulator
  inst ldo : {ocdb/diodes-incorporated/AP2112/module}
  net P5v0 (ldo.vin {protected-usb}.vbus)

  ; Add a Bluetooth SoC
  inst proc : {ocdb/espressif/ESP32-PICO-D4/module}
  inst ant : inverted-f-antenna
  net (proc.ant, ant.rf-in)
  package(ant) at loc(9.0, 5.0, -90.0) on Top

  ; Use a connect statement to interface USB-2 to UART
  val xcvr = connect ft232 ({protected-usb} proc.uart)
  
  inst particle-counter : pms7003
  package(particle-counter) at loc(-10.0,0.0, 180.0) on Bottom

  inst hum : {ocdb/texas-instruments/HDC1080/module}

  net P3V3 (hum.power, proc.power, ldo.vout)
  symbol(P3V3) = {ocdb/symbols/supply-sym}

  ; Apply groups to sub-circuits for schematic and layout
  group-modules([[proc  ant hum] [usb particle-counter]])

val main-design = default-board(sensor-mote, 4, 30.0,18.0)

run-user-pass(connect-gnd-pins)
view(main-design)

export-kicad("BLE-mote", [`place => true
                          `check-log => "checks.txt"
                          `gen-board => true 
                          `gen-bom => true 
                          `gen-schematic => true 
                          `paper => ANSI-A4
                          `fresh => true 
                          `schematic-version => 4
                          `param-configs => [`sketch]] )
